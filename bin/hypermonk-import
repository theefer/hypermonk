#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'rubygems'
require 'nokogiri'

require 'date'
require 'pathname'

# TODO:
# * Support all metadata, including name syntax, lists, types, etc
# + Sanitize file reader/writers, string vs DOM vs IO in chain
# - Transform dialog styles
# - Nice namespace, package name
# - Smart format graph to generate chains
# - Import RTF, other formats


RESOURCE_ROOT = File.dirname(__FILE__) + '/../resources'


module Xslt
  RESOURCE_DIR = RESOURCE_ROOT + '/xslt'
  def self.get(name)
    return Nokogiri::XSLT(File.read("#{RESOURCE_DIR}/#{name}.xslt"))
  end
end



module FormatConverter
  def self.included(klass)
    klass.extend(ClassMethods)
  end

  module ClassMethods
    def from(format)
      @from = format
    end

    def to(format)
      @to = format
    end
  end

  def transform(source, metadata)
    raise MissingMethodException unless self.respond_to?(:convert)
    args = (method(:convert).arity == 1 ? [source] : [source, metadata])
    [self.convert(*args), metadata].flatten[0...2]
  end
end

module TextFilter
  def apply_filter(source, filter)
    self.method(filter).call(source)
  end

  # FIXME: change so that it doesn't depend on include order
  def transform(source, metadata)
    source = self.apply_filter(source, :pre_filter)  if self.respond_to?(:pre_filter)
    source, metadata = super(source, metadata)
    source = self.apply_filter(source, :post_filter) if self.respond_to?(:post_filter)
    [source, metadata]
  end
end

module TextNodeFilter
  include TextFilter

  def apply_filter_recursive(e, filter)
    e.children.each do |child|
      if child.is_a?(Nokogiri::XML::Text)
        # FIXME: avoid escaping - works with multiple subnodes etc?
        # child.inner_html = self.method(filter).call(child.inner_html)
        child.content = self.method(filter).call(child.content)
      else
        self.apply_filter_recursive(child, filter)
      end
    end
  end

  def apply_filter(source, filter)
# FIXME: arg, make it apply to both docbook and meta!
    source.root.xpath('//para').each {|e| self.apply_filter_recursive(e, filter)}
    source.root.xpath('//p').each {|e| self.apply_filter_recursive(e, filter)}
    source
  end
end


class MetadataPrompt
  include FormatConverter

  # FIXME: or any-to-any?
  from :meta
  to   :meta

  METADATA = {
    :title            => 'Title',
    :author           => 'Author(s)',
    :translator       => 'Translators(s)',
    :publication_date => 'Publication date',
    :publisher        => 'Publisher',
    :license          => 'License',
    # :date        => 'Date',
    # :language    => 'Language',
    :identifier  => 'Identifier (URI)'
  }
  # FIXME: for each field:
  # - required
  # - type
  # - multiple values
  # - default (load from somewhere?)
  # - type (validation)

  # FIXME: special format, e.g. author (last, first)

  def convert(source, metadata)
    # inspect metadata, fill missing
    METADATA.select {|key,| metadata[key].nil?}.each do |key, label|
      print "#{label}: "
      value = STDIN.gets.chomp
      metadata[key] = value if value
    end

    [source, metadata]
  end
end


class WordImporter
  include FormatConverter

  from :doc
  to   :docbook

  def convert(source)
    xml=`antiword -x db "#{source}"`
    opts = Nokogiri::XML::ParseOptions
    doc = Nokogiri::XML::Document.parse(xml, nil, 'UTF-8', opts::NOBLANKS)

    return doc
  end
end



class TextImporter
  include FormatConverter

  from :txt
  to   :docbook

  def convert(source)
    paras = File.read(source).gsub(/\r\n/, "\n").split(/\n\n+/)
    paras.map! {|p| p.gsub(/\n/, ' ').chomp(' ')}
    xml = <<EOS
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
        "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book lang='en_US'>
<chapter>
EOS
    xml += "<para>" +paras.join("</para>\n<para>")+ "</para>\n"
    xml += "</chapter></book>"
    doc = Nokogiri::XML::Document.parse(xml, nil, 'UTF-8')
    return doc
  end
end


class DocbookTransformer
  include FormatConverter
  include TextNodeFilter

  from :docbook
  to   :meta

  def convert(source, metadata)
    xslt = Xslt.get('docbook-to-pivot')
    html = xslt.transform(source, Nokogiri::XSLT.quote_params(metadata))
    # Handle::HTML.new { html }
  end

  def pre_filter(text)
    text = text.gsub(/ *\n */, '')
    text = text.gsub('  ', ' ')

    text = text.gsub(/ ([!?:;])/, '\1') # can't match nbsp in [] as it's multibyte, so clean first
    text = text.gsub(/\s*([!?:;])/, ' \1') #nbsp
    text = text.gsub(/--+/, '–') #endash

    text = text.gsub(/^–/, '—') # replace dialog (start-of-line) endash by emdash
    text = text.gsub(/"(.*)"/, '“\1”') # replace straight double quotes by curly quote pairs
    text = text.gsub(/'/, '’') # replace straight apostrophe by curly apostrophe

    # ADD: single and double quotes, guillemets (and nbsp!)
    # ADD: ellipsis
    # ADD: apostrophe

    # FIXME: or use unicode?
    # text = text.gsub(/[’']/, '&apos;')
    text = text.gsub('...', '…')
    # FIXME: how to know when to use a ligature and when not to?
    text = text.gsub('oe', 'œ')
    text = text.gsub('Oe', 'Œ')
    text = text.gsub('OE', 'Œ')
    text = text.gsub('ae', 'æ')
    text = text.gsub('Ae', 'Æ')
    text = text.gsub('AE', 'Æ')
  end
end



def run_chain(chain, source, metadata={})
  chain.inject([source, metadata]) do |s_m, converter|
    conv = converter.new
    s_m = conv.transform(*s_m)
  end
end

def show_usage_and_die
  puts "usage: hypermonk-import <source> <publication>"
  exit 1
end


class Publication
  PIVOT_EXTENSION = 'html'

  def initialize(path)
    File.makedirs(path) unless File.exists?(path)
    throw "invalid publication: #{path}" unless File.directory?(path)

    @path = path
    @name = File.basename(path)
  end

  def pivot_file
    @pivot_file ||= "#{@path}/#{@name}.#{PIVOT_EXTENSION}"
  end

  def read_pivot
    begin
      return File.read(pivot_file)
    rescue StandardError => e
      throw "no pivot imported for publication #{@path}"
    end
  end

  def write_pivot(data, backup_existing=true)
    if File.exists?(pivot_file)
      backup_path = "#{@path}/backups"
      File.makedirs(backup_path) unless File.exists?(backup_path)
      FileUtils.mv(pivot_file, "#{backup_path}/#{@name}.#{PIVOT_EXTENSION}-#{DateTime.now.strftime}")
    end
    File.open(pivot_file, 'w') {|f| f.write(data)}
  end

  def write_output(handle)
    File.makedirs(output_dir) unless File.exists?(output_dir)
    handle.write_to("#{output_dir}/#{@name}#{handle.suffix}.#{handle.extension}")
  end

  protected
  def output_dir; "#{@path}/output"; end

end


source, pivot = ARGV[0..1]
show_usage_and_die if source.nil?

publication = Publication.new(pivot)

chain =
  case source.downcase
  when /\.doc$/
    [WordImporter, MetadataPrompt, DocbookTransformer]
  # when /\.rtf$/; ...
  when /\.txt$/
    [TextImporter, MetadataPrompt, DocbookTransformer]
  else
    raise 'Unknown import format #{source.scan(/\..*$/)}'
  end

res_source, res_metadata = run_chain(chain, source)
publication.write_pivot(res_source)
